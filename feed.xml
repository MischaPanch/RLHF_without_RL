<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://iclr-blogposts.github.io/2024/feed.xml" rel="self" type="application/atom+xml"/><link href="https://iclr-blogposts.github.io/2024/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-02-29T16:14:08+01:00</updated><id>https://iclr-blogposts.github.io/2024/feed.xml</id><title type="html">ICLR Blogposts 2024</title><subtitle>Home to the 2024 ICLR Blogposts track </subtitle><entry><title type="html">Sample Blog Post</title><link href="https://iclr-blogposts.github.io/2024/blog/distill-example/" rel="alternate" type="text/html" title="Sample Blog Post"/><published>2024-05-07T00:00:00+02:00</published><updated>2024-05-07T00:00:00+02:00</updated><id>https://iclr-blogposts.github.io/2024/blog/distill-example</id><content type="html" xml:base="https://iclr-blogposts.github.io/2024/blog/distill-example/"><![CDATA[<p>Note: please use the table of contents as defined in the front matter rather than the traditional markdown styling.</p> <h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <h2 id="images-and-figures">Images and Figures</h2> <p>Its generally a better idea to avoid linking to images hosted elsewhere - links can break and you might face losing important information in your blog post. To include images in your submission in this way, you must do something like the following:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% include figure.html path="assets/img/2024-05-07-distill-example/iclr.png" class="img-fluid" %}
</code></pre></div></div> <p>which results in the following image:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/iclr-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/iclr-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/iclr-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/iclr.png" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>To ensure that there are no namespace conflicts, you must save your asset to your unique directory <code class="language-plaintext highlighter-rouge">/assets/img/2024-05-07-[SUBMISSION NAME]</code> within your submission.</p> <p>Please avoid using the direct markdown method of embedding images; they may not be properly resized. Some more complex ways to load images (note the different styles of the shapes/shadows):</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/9-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/9-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/9-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/7-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all. </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/8-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/8-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/8-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/8.jpg" class="img-fluid z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/10-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/10-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/10-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/10.jpg" class="img-fluid z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/11-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/11-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/11-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/11.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/12-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/12-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/12-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/12.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/7-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/7.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="interactive-figures">Interactive Figures</h3> <p>Here’s how you could embed interactive figures that have been exported as HTML files. Note that we will be using plotly for this demo, but anything built off of HTML should work (<strong>no extra javascript is allowed!</strong>). All that’s required is for you to export your figure into HTML format, and make sure that the file exists in the <code class="language-plaintext highlighter-rouge">assets/html/[SUBMISSION NAME]/</code> directory in this repository’s root directory. To embed it into any page, simply insert the following code anywhere into your page.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% include [FIGURE_NAME].html %} 
</code></pre></div></div> <p>For example, the following code can be used to generate the figure underneath it.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span><span class="p">)</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
    <span class="n">df</span><span class="p">,</span> <span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
    <span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span> <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">./assets/html/2024-05-07-distill-example/plotly_demo_1.html</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>And then include it with the following:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"l-page"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"{{ 'assets/html/2024-05-07-distill-example/plotly_demo_1.html' | relative_url }}"</span> <span class="na">frameborder=</span><span class="s">'0'</span> <span class="na">scrolling=</span><span class="s">'no'</span> <span class="na">height=</span><span class="s">"600px"</span> <span class="na">width=</span><span class="s">"100%"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>Voila!</p> <div class="l-page"> <iframe src="/2024/assets/html/2024-05-07-distill-example/plotly_demo_1.html" frameborder="0" scrolling="no" height="600px" width="100%"></iframe> </div> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. You can try toggling it on or off yourself below:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="diagrams">Diagrams</h2> <p>This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin. Below, we generate a few examples of such diagrams using languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p> <p><strong>Note:</strong> different diagram-generation packages require external dependencies to be installed on your machine. Also, be mindful of that because of diagram generation the first time you build your Jekyll website after adding new diagrams will be SLOW. For any other details, please refer to <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> README.</p> <p><strong>Note:</strong> This is not supported for local rendering!</p> <p>The diagram below was generated by the following code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1709219652380" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1709219652380 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1709219652380 .node circle,#mermaid-1709219652380 .node ellipse,#mermaid-1709219652380 .node polygon,#mermaid-1709219652380 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1709219652380 .node.clickable{cursor:pointer}#mermaid-1709219652380 .arrowheadPath{fill:#333}#mermaid-1709219652380 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1709219652380 .edgeLabel{background-color:#e8e8e8}#mermaid-1709219652380 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1709219652380 .cluster text{fill:#333}#mermaid-1709219652380 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1709219652380 .actor{stroke:#ccf;fill:#ececff}#mermaid-1709219652380 text.actor{fill:#000;stroke:none}#mermaid-1709219652380 .actor-line{stroke:grey}#mermaid-1709219652380 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1709219652380 .messageLine0,#mermaid-1709219652380 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1709219652380 #arrowhead{fill:#333}#mermaid-1709219652380 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1709219652380 .messageText{fill:#333;stroke:none}#mermaid-1709219652380 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1709219652380 .labelText,#mermaid-1709219652380 .loopText{fill:#000;stroke:none}#mermaid-1709219652380 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1709219652380 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1709219652380 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1709219652380 .section{stroke:none;opacity:.2}#mermaid-1709219652380 .section0{fill:rgba(102,102,255,.49)}#mermaid-1709219652380 .section2{fill:#fff400}#mermaid-1709219652380 .section1,#mermaid-1709219652380 .section3{fill:#fff;opacity:.2}#mermaid-1709219652380 .sectionTitle0,#mermaid-1709219652380 .sectionTitle1,#mermaid-1709219652380 .sectionTitle2,#mermaid-1709219652380 .sectionTitle3{fill:#333}#mermaid-1709219652380 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1709219652380 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1709219652380 .grid path{stroke-width:0}#mermaid-1709219652380 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1709219652380 .task{stroke-width:2}#mermaid-1709219652380 .taskText{text-anchor:middle;font-size:11px}#mermaid-1709219652380 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1709219652380 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1709219652380 .taskText0,#mermaid-1709219652380 .taskText1,#mermaid-1709219652380 .taskText2,#mermaid-1709219652380 .taskText3{fill:#fff}#mermaid-1709219652380 .task0,#mermaid-1709219652380 .task1,#mermaid-1709219652380 .task2,#mermaid-1709219652380 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1709219652380 .taskTextOutside0,#mermaid-1709219652380 .taskTextOutside1,#mermaid-1709219652380 .taskTextOutside2,#mermaid-1709219652380 .taskTextOutside3{fill:#000}#mermaid-1709219652380 .active0,#mermaid-1709219652380 .active1,#mermaid-1709219652380 .active2,#mermaid-1709219652380 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1709219652380 .activeText0,#mermaid-1709219652380 .activeText1,#mermaid-1709219652380 .activeText2,#mermaid-1709219652380 .activeText3{fill:#000!important}#mermaid-1709219652380 .done0,#mermaid-1709219652380 .done1,#mermaid-1709219652380 .done2,#mermaid-1709219652380 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1709219652380 .doneText0,#mermaid-1709219652380 .doneText1,#mermaid-1709219652380 .doneText2,#mermaid-1709219652380 .doneText3{fill:#000!important}#mermaid-1709219652380 .crit0,#mermaid-1709219652380 .crit1,#mermaid-1709219652380 .crit2,#mermaid-1709219652380 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1709219652380 .activeCrit0,#mermaid-1709219652380 .activeCrit1,#mermaid-1709219652380 .activeCrit2,#mermaid-1709219652380 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1709219652380 .doneCrit0,#mermaid-1709219652380 .doneCrit1,#mermaid-1709219652380 .doneCrit2,#mermaid-1709219652380 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1709219652380 .activeCritText0,#mermaid-1709219652380 .activeCritText1,#mermaid-1709219652380 .activeCritText2,#mermaid-1709219652380 .activeCritText3,#mermaid-1709219652380 .doneCritText0,#mermaid-1709219652380 .doneCritText1,#mermaid-1709219652380 .doneCritText2,#mermaid-1709219652380 .doneCritText3{fill:#000!important}#mermaid-1709219652380 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1709219652380 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1709219652380 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1709219652380 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1709219652380 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1709219652380 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1709219652380 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1709219652380 #compositionEnd,#mermaid-1709219652380 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1709219652380 #aggregationEnd,#mermaid-1709219652380 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1709219652380 #dependencyEnd,#mermaid-1709219652380 #dependencyStart,#mermaid-1709219652380 #extensionEnd,#mermaid-1709219652380 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1709219652380 .branch-label,#mermaid-1709219652380 .commit-id,#mermaid-1709219652380 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1709219652380{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg> </div> <hr/> <h2 id="tweets">Tweets</h2> <p>An example of displaying a tweet:</p> <div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <p>An example of pulling from a timeline:</p> <div class="jekyll-twitter-plugin"><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <p>For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a></p> <hr/> <h2 id="blockquotes">Blockquotes</h2> <blockquote> We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin </blockquote> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code>-sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behavior, where trailing spaces are not required.)</p> <ul> <li>Unordered lists can use asterisks</li> <li>Or minuses</li> <li>Or pluses</li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting. 
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[Your blog post's abstract. Please add your abstract or summary here and not in the main body of your text. Do not include math/latex or hyperlinks.]]></summary></entry><entry><title type="html">Sample Blog Post (HTML version)</title><link href="https://iclr-blogposts.github.io/2024/blog/distill-example2/" rel="alternate" type="text/html" title="Sample Blog Post (HTML version)"/><published>2024-05-07T00:00:00+02:00</published><updated>2024-05-07T00:00:00+02:00</updated><id>https://iclr-blogposts.github.io/2024/blog/distill-example2</id><content type="html" xml:base="https://iclr-blogposts.github.io/2024/blog/distill-example2/"><![CDATA[<p> This is a sample blog post written in HTML (while the other <a href="/2024/blog/distill-example/">sample post</a> is written in Markdown). Authors have the choice to write in HTML or Markdown. While Markdown is easier to write, HTML gives you more control over the layout of your post. Furthermore, Markdown often interacts in unexpected ways with MathJax and other HTML widgets. If you are having trouble with Markdown, try writing in HTML instead. </p> <p> Note: please use the table of contents as defined in the front matter rather than the traditional markdown styling. </p> <h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code>$$</code>, like <code>$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code>$$</code> and place it as a separate paragraph. Here is an example: $$ \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) $$ </p> <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <h2 id="images-and-figures">Images and Figures</h2> <p>Its generally a better idea to avoid linking to images hosted elsewhere - links can break and you might face losing important information in your blog post. You can display images from this repository using the following code:</p> <pre><code>{% include figure.html path="assets/img/2024-05-07-distill-example/iclr.png" class="img-fluid" %}</code></pre> <p>which results in the following image:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/iclr-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/iclr-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/iclr-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/iclr.png" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p> To ensure that there are no namespace conflicts, you must save your asset to your unique directory `/assets/img/2024-05-07-[SUBMISSION NAME]` within your submission. </p> <p> Please avoid using the direct HTML method of embedding images; they may not be properly resized. Some below complex ways to load images (note the different styles of the shapes/shadows): </p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/9-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/9-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/9-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/7-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all. </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/8-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/8-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/8-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/8.jpg" class="img-fluid z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/10-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/10-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/10-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/10.jpg" class="img-fluid z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/11-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/11-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/11-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/11.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/12-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/12-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/12-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/12.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-distill-example/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-distill-example/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-distill-example/7-1400.webp"/> <img src="/2024/assets/img/2024-05-07-distill-example/7.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3>Interactive Figures</h3> <p> Here's how you could embed interactive figures that have been exported as HTML files. Note that we will be using plotly for this demo, but anything built off of HTML should work. All that's required is for you to export your figure into HTML format, and make sure that the file exists in the `assets/html/[SUBMISSION NAME]/` directory in this repository's root directory. To embed it into any page, simply insert the following code anywhere into your page. </p> <pre><code>{% include [FIGURE_NAME].html %}</code></pre> <p> For example, the following code can be used to generate the figure underneath it. </p> <pre><code class="language-python">import pandas as pd
import plotly.express as px

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')

fig = px.density_mapbox(
    df, lat='Latitude', lon='Longitude', z='Magnitude', radius=10,
    center=dict(lat=0, lon=180), zoom=0, mapbox_style="stamen-terrain")
fig.show()

fig.write_html('./assets/html/2024-05-07-distill-example/plotly_demo_1.html')
</code></pre> And then include it with the following: <pre><code class="language-html">&lt;div class="l-page"&gt;
  &lt;iframe src="{{ 'assets/html/2024-05-07-distill-example/plotly_demo_1.html' | relative_url }}" frameborder='0' scrolling='no' height="600px" width="100%"&gt;&lt;/iframe&gt;
&lt;/div&gt;
</code></pre> Voila! <div class="l-page"> <iframe src="/2024/assets/html/2024-05-07-distill-example/plotly_demo_1.html" frameborder='0' scrolling='no' height="600px" width="100%"></iframe> </div> <h2 id="citations">Citations</h2> <p> Citations are then used in the article body with the <code>&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas. </p> <p> The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it. </p> <p> Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well - the authors are human and it's nice for them to have the community associate them with their work. </p> <h2 id="footnotes">Footnotes</h2> <p> Just wrap the text you would like to show up in a footnote in a <code>&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote> </p> <h2 id="code-blocks">Code Blocks</h2> <p> This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in a liquid tag as follows: </p> <pre><code>
{% highlight c++ linenos %}  <br/> code code code <br/> {% endhighlight %}

</code></pre> The keyword `linenos` triggers display of line numbers. You can try toggling it on or off yourself below: <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <h2 id="diagrams">Diagrams</h2> <p> This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams">jekyll-diagrams</a> plugin. Below, we generate a few examples of such diagrams using languages such as <a href="http://mermaid.js.org/">mermaid</a>, <a href="https://plantuml.com/">plantuml</a>, <a href="https://vega.github.io/vega-lite/">vega-lite</a>, etc. </p> <p> <b>Note</b>different diagram-generation packages require external dependencies to be installed on your machine. Also, be mindful of that because of diagram generation the first time you build your Jekyll website after adding new diagrams will be SLOW. For any other details, please refer to the <a href="https://github.com/zhustec/jekyll-diagrams">jekyll-diagrams</a> README. </p> <p> <b>Note:</b> This is not supported for local rendering! </p> <p> The diagram below was generated by the following code: </p> <pre><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
{% endmermaid %}

</code></pre> <div class='jekyll-diagrams diagrams mermaid'> <svg id="mermaid-1709219652965" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1709219652965 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1709219652965 .node circle,#mermaid-1709219652965 .node ellipse,#mermaid-1709219652965 .node polygon,#mermaid-1709219652965 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1709219652965 .node.clickable{cursor:pointer}#mermaid-1709219652965 .arrowheadPath{fill:#333}#mermaid-1709219652965 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1709219652965 .edgeLabel{background-color:#e8e8e8}#mermaid-1709219652965 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1709219652965 .cluster text{fill:#333}#mermaid-1709219652965 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1709219652965 .actor{stroke:#ccf;fill:#ececff}#mermaid-1709219652965 text.actor{fill:#000;stroke:none}#mermaid-1709219652965 .actor-line{stroke:grey}#mermaid-1709219652965 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1709219652965 .messageLine0,#mermaid-1709219652965 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1709219652965 #arrowhead{fill:#333}#mermaid-1709219652965 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1709219652965 .messageText{fill:#333;stroke:none}#mermaid-1709219652965 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1709219652965 .labelText,#mermaid-1709219652965 .loopText{fill:#000;stroke:none}#mermaid-1709219652965 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1709219652965 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1709219652965 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1709219652965 .section{stroke:none;opacity:.2}#mermaid-1709219652965 .section0{fill:rgba(102,102,255,.49)}#mermaid-1709219652965 .section2{fill:#fff400}#mermaid-1709219652965 .section1,#mermaid-1709219652965 .section3{fill:#fff;opacity:.2}#mermaid-1709219652965 .sectionTitle0,#mermaid-1709219652965 .sectionTitle1,#mermaid-1709219652965 .sectionTitle2,#mermaid-1709219652965 .sectionTitle3{fill:#333}#mermaid-1709219652965 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1709219652965 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1709219652965 .grid path{stroke-width:0}#mermaid-1709219652965 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1709219652965 .task{stroke-width:2}#mermaid-1709219652965 .taskText{text-anchor:middle;font-size:11px}#mermaid-1709219652965 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1709219652965 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1709219652965 .taskText0,#mermaid-1709219652965 .taskText1,#mermaid-1709219652965 .taskText2,#mermaid-1709219652965 .taskText3{fill:#fff}#mermaid-1709219652965 .task0,#mermaid-1709219652965 .task1,#mermaid-1709219652965 .task2,#mermaid-1709219652965 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1709219652965 .taskTextOutside0,#mermaid-1709219652965 .taskTextOutside1,#mermaid-1709219652965 .taskTextOutside2,#mermaid-1709219652965 .taskTextOutside3{fill:#000}#mermaid-1709219652965 .active0,#mermaid-1709219652965 .active1,#mermaid-1709219652965 .active2,#mermaid-1709219652965 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1709219652965 .activeText0,#mermaid-1709219652965 .activeText1,#mermaid-1709219652965 .activeText2,#mermaid-1709219652965 .activeText3{fill:#000!important}#mermaid-1709219652965 .done0,#mermaid-1709219652965 .done1,#mermaid-1709219652965 .done2,#mermaid-1709219652965 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1709219652965 .doneText0,#mermaid-1709219652965 .doneText1,#mermaid-1709219652965 .doneText2,#mermaid-1709219652965 .doneText3{fill:#000!important}#mermaid-1709219652965 .crit0,#mermaid-1709219652965 .crit1,#mermaid-1709219652965 .crit2,#mermaid-1709219652965 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1709219652965 .activeCrit0,#mermaid-1709219652965 .activeCrit1,#mermaid-1709219652965 .activeCrit2,#mermaid-1709219652965 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1709219652965 .doneCrit0,#mermaid-1709219652965 .doneCrit1,#mermaid-1709219652965 .doneCrit2,#mermaid-1709219652965 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1709219652965 .activeCritText0,#mermaid-1709219652965 .activeCritText1,#mermaid-1709219652965 .activeCritText2,#mermaid-1709219652965 .activeCritText3,#mermaid-1709219652965 .doneCritText0,#mermaid-1709219652965 .doneCritText1,#mermaid-1709219652965 .doneCritText2,#mermaid-1709219652965 .doneCritText3{fill:#000!important}#mermaid-1709219652965 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1709219652965 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1709219652965 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1709219652965 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1709219652965 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1709219652965 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1709219652965 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1709219652965 #compositionEnd,#mermaid-1709219652965 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1709219652965 #aggregationEnd,#mermaid-1709219652965 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1709219652965 #dependencyEnd,#mermaid-1709219652965 #dependencyStart,#mermaid-1709219652965 #extensionEnd,#mermaid-1709219652965 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1709219652965 .branch-label,#mermaid-1709219652965 .commit-id,#mermaid-1709219652965 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1709219652965{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg> </div> <h2 id="tweets">Tweets</h2> <p> An example of displaying a tweet: <div class='jekyll-twitter-plugin'><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> </p> <p> An example of pulling from a timeline: <div class='jekyll-twitter-plugin'><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> </p> <p> For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a> </p> <h2 id="blockquotes">Blockquotes</h2> <blockquote> We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin </blockquote> <h2 id="layouts">Layouts</h2> The main text column is referred to as the body. It's the assumed layout of any direct descendants of the `d-article` element. <div class="fake-img l-body"> <p>.l-body</p> </div> For images you want to display a little larger, try `.l-page`: <div class="fake-img l-page"> <p>.l-page</p> </div> All of these have an outset variant if you want to poke out from the body text a little bit. For instance: <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> Occasionally you'll want to use the full browser width. For this, use `.l-screen`. You can also inset the element a little from the edge of the browser by using the inset variant. <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of `.l-body`-sized text except on mobile screen sizes. <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <h2 id="other-typography">Other Typography?</h2> <p> Emphasis, aka italics, with the <code>&lt;i&gt;&lt;/i&gt;</code> tag <i>emphasis</i>. </p> <p> Strong emphasis, aka bold, with <code>&lt;b&gt;&lt;/b&gt;</code> tag <b>bold</b>. </p> <p> Strikethrough ca be accomplished with the <code>&lt;s&gt;&lt;/s&gt;</code> tag. <s>Scratch this.</s> </p> <ul> <li>First ordered list item</li> <li>Another item</li> <ol> <li>Unordered sub-list. </li> </ol> <li>And another item.</li> </ul> <p> For code, the language can be specified in the class. For example, use <q>language-javascript</q> for Javascript and <q>language-python</q> for Python code. </p> <pre><code class="language-javascript">var s = "JavaScript syntax highlighting";
  alert(s);</code></pre> <pre><code class="language-python">s = "Python syntax highlighting"
  print(s)</code></pre> <pre><code class="language-python">No language indicated, so no syntax highlighting.</code></pre> <p> A table can be created with the <code>&lt;table&gt;</code> element. Below is an example </p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p> <blockquote>Blockquotes can be defined with the &gt;blockquote&lt; tag.</blockquote> </p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[Your blog post's abstract. Please add your abstract or summary here and not in the main body of your text. Do not include math/latex or hyperlinks.]]></summary></entry><entry><title type="html">RLHF without RL - Direct Preference Optimization</title><link href="https://iclr-blogposts.github.io/2024/blog/rlhf-without-rl/" rel="alternate" type="text/html" title="RLHF without RL - Direct Preference Optimization"/><published>2024-05-07T00:00:00+02:00</published><updated>2024-05-07T00:00:00+02:00</updated><id>https://iclr-blogposts.github.io/2024/blog/rlhf-without-rl</id><content type="html" xml:base="https://iclr-blogposts.github.io/2024/blog/rlhf-without-rl/"><![CDATA[<h2 id="background">Background</h2> <p>Reinforcement learning from human feedback (RLHF) is an important technique for aligning (large) language models (LM) with human preferences. It was introduced by Christiano et al.<d-cite key="christiano2017deep"></d-cite> and then first applied to language models in the work by Ziegler et al.<d-cite key="ziegler2019fine"></d-cite>. Since then, RLHF has become a central building block of many LLM-based applications, including the first versions of ChatGPT.</p> <p>RLHF for language models works roughly as follows:</p> <ol> <li>Collect a dataset of prompts $\mathcal{D}$ for the LM, typically containing instructions or questions.</li> <li>For each prompt $x\in \mathcal{D}$, collect a set of completions $y_1, …, y_N$ from the LM. One can increase the temperature of the language model for this step to get a sufficient variability in them.</li> <li>Ask human annotators to rate the completions, thereby obtaining a dataset of preferences $x, y_{rank_1}, …, y_{rank_N}$.</li> <li> <p>Train a parameterized reward function $r_\phi$ (mapping pairs $(x,y)$ to scalars) on the collected preferences by minimizing the loss</p> \[\mathcal{L}(r) = \mathbb{E}_{(x, y_{rank_i})} \left[ \log \frac{e^{r(x, y_{rank_i})}}{\sum_{j=1}^N e^{r(x, y_{rank_j})}} \right].\] <p>This loss is inspired by the Bradley-Terry model<d-cite key="bradley1952rank"></d-cite> for pairwise comparisons and by maximum-entropy inverse RL<d-cite key="ziebart2008maximum"></d-cite>. Intuitively, it encourages the reward function to assign higher rewards to completions that are preferred by humans. Usually, the reward function is parameterized by the LM itself with an additional linear layer. Thus, the mapping from $(x, y)$ to $r(x, y)$ is given by simply concatenating the sequences $x$ and $y$ and passing the embedding of the last (or a differently selected) token through a linear layer.</p> </li> <li> <p>Fine-tune the LM by viewing it as a policy $\pi_\theta$ and using RL with the learned reward function $r_\phi$ as the reward. For this step, a separate dataset of prompts $\mathcal{D}_{\text{RL}}$ is used to query the LM and collect completions. Since the reward is learned on a very limited subset of possible completions, and is therefore unreliable in off-distribution data, it would be unwise to aim at optimizing it without any regularization.</p> <p>The typical choice of regularization is the KL-divergence between the policy (i.e. the aligned/fine-tuned LM) and a reference policy $\pi_{\text{ref}}$ (usually the pretrained LM before fine-tuning). The RLHF objective then becomes</p> \[\tag{1} \label{eq:rlhf} J(\pi) = \mathbb{E}_{x \sim \mathcal{D}_\text{RL}, y\sim \pi_\theta(y \mid x)} \left[ r_\phi(x, y)- \beta D_{\text{KL}} \left( \pi(y, s) || \pi_\text{ref}(y, s) \right) \right],\] <p>which is then used to find the optimal policy $\pi_\theta$ by some optimization algorithm, typically a variant of proximal policy optimization (PPO)<d-cite key="schulman2017proximal"></d-cite>. Here $D_{\text{KL}}$ denotes the KL-divergence between two distributions, and the temperature $\beta$ is a hyperparameter that controls the strength of the regularization.</p> </li> </ol> <p>The resulting LLMs are very powerful and so widely used that we don’t need to further elaborate on their performance here. Note, however, that the RLHF scheme has quite some complexity when it comes to actually making it work in practice<d-cite key="Huang2023implementation"></d-cite>.</p> <h2 id="is-rlhf-reinforcement-learning">Is RLHF Reinforcement Learning?</h2> <p>From the beginning, RLHF has sparked some controversy. Some regarded it as one of the prime applications of reinforcement learning (which may currently be perceived as “less hot” than LLMs, wherefore applying RL in LLMs is in the former’s favor). At the same time, others were skeptical about whether RLHF is reinforcement learning at all.</p> <p>Indeed, some crucial components of RL are missing in RLHF. First, the current forms of RLHF do not involve sequential decision-making (although there is some work on that, e.g., the ILQL algorithm<d-cite key="snell2022offline"></d-cite>). While the rollout of a completion can formally be viewed as a sequence of actions, the reward is not given after the completion has ended. Moreover, for the purpose of RLHF the LM itself can be regarded as a direct mapping from inputs to distributions over completions, rather than a sequential decision-making agent in the space of tokens. Thus, at best, RLHF is a form of single-step, immediate-reward RL - in other words, a <em>contextual bandit</em>.</p> <p>Even more troubling than the non-sequential nature of RLHF may be its information flow. While the policy optimization of RLHF is framed as an online RL algorithm, <em>the environment consists of the policy itself</em>. Usually, in online RL an agent is able to extract new information from the environment. In RLHF, however, the information is not “new” in the sense that it is not extracted from something external to the agent itself. The only information not originally contained in the LM is in the preferences data (notably, not even in the completions themselves, but only in their rankings), and it is only used to fit a reward function. Thus, RLHF is more reminiscent of offline RL or supervised learning than of online RL.</p> <p>Because of this 1-step nature of RLHF and due to the (unusual for RL) application of training enormous models, the majority of RLHF software is not set up to be compatible with gym(nasium) or other environment interfaces. Take, for example, the well known <a href="https://github.com/huggingface/trl">trl</a> and <a href="https://github.com/CarperAI/trlx">trlx</a> libraries, which barely mention environments at all. A notable exception is the <a href="https://github.com/allenai/RL4LMs">RL4LMs project</a> by AllenAI, which unfortunately seems to be abandoned, and is based on the deprecated gym instead of <a href="https://gymnasium.farama.org/">gymnasium</a>. For practical RLHF, training in parallel on massive datasets is a necessary requirement, which somewhat complicates the use of standard environment and training interfaces.</p> <p>The view that RLHF is not “really” RL, or at least does not have to be, has become even more popular after the publication of the DPO algorithm<d-cite key="rafailov2023direct"></d-cite>, which we will discuss in the next section.</p> <h2 id="direct-preference-optimization">Direct Preference Optimization</h2> <p>The direct preference optimization (DPO) algorithm for aligning language models (LM) by Rafailov et al.<d-cite key="rafailov2023direct"></d-cite> is a method for aligning LMs to human preferences without having to sample from the LM and without using RL explicitly. Interestingly, DPO still optimizes the same objective as RLHF, but does so purely by supervised learning. This results in a much simpler training procedure and reportedly better performance in a number of experiments.</p> <p>The mathematical derivation of DPO is short and insightful. It is based on the following observations:</p> <h3 id="1-reward-as-a-function-of-the-policy">1. Reward as a Function of the Policy</h3> <p>The RLHF objective (\ref{eq:rlhf}) has an exact (non-parametric) solution for the optimal policy $\pi_r$:</p> \[\pi_r(y \mid x) = \frac{1}{Z(x)} \pi_{\text{ref}}(y \mid x) \exp \left( \frac{1}{\beta} r(x, y) \right).\] <p>This expression is well known in the RL literature and is sometimes referred to as <em>Boltzmann policy</em> (note that in the 1-step RL setting, the Q-function is given by the reward itself).</p> <p>Similar results were proved in the REPS algorithm<d-cite key="peters2010relative"></d-cite> and follow-up work (a more recent paper in that direction is <d-cite key="peng2019advantage"></d-cite>). While this solution for $\pi_r$ in itself is intractable (because of the partition function $Z(x)$), it can be used to express the reward as a function of the optimal policy:</p> \[\tag{2} \label{eq:reward-as-function-of-policy} r(x, y) = \beta \log \left( \frac{\pi_r(y \mid x)}{\pi_{\text{ref}}(y \mid x)} \right) + \log Z(x).\] <h3 id="2-only-differences-of-rewards-are-needed">2. Only Differences of Rewards Are Needed</h3> <p>For simplicity, let us consider that only two completions are collected per input, which are then ranked as $y_w$ and $y_l$ (for winning and losing). DPO can be easily extended to the case of more completions per input, but the notation becomes more cumbersome.</p> <p>The reward $r_\phi$ is then learned by minimizing the loss:</p> \[\mathcal{L}_\phi = \mathbb{E}_{(x, y_w, y_l) \sim \mathcal{D}}\left[ \log \frac{ e ^ {r_\phi(x, y_w)}}{ e^{r_\phi(x, y_w)} + e^{r_\phi(x, y_l)}} \right]\] <p>which is equivalent to</p> \[\tag{3} \label{eq:reward-loss-binary} \mathcal{L}_\phi = - \mathbb{E}_{(x, y_w, y_l)\sim \mathcal{D}} \left[ \log \sigma \left( r_\phi(x, y_w) - r_\phi(x, y_l) \right) \right],\] <p>where $\sigma$ is the sigmoid function. Note that only <em>differences of rewards</em> enter (\ref{eq:reward-loss-binary}).</p> <h3 id="3-dpo-objective">3. DPO Objective</h3> <p>After plugging the expression for the policy \ref{eq:reward-as-function-of-policy} into the loss \ref{eq:reward-loss-binary}, the partition function $Z(x)$ cancels out. Replacing the optimal $\pi_r$ with the parameterized $\pi_\theta$, the DPO objective is obtained as</p> \[\mathcal{L}_{\text{DPO}}(\pi_\theta ; \pi_{\text{ref}}) := - \mathbb{E}_{(x, y_w, y_l) \sim \mathcal{D}} \left[ \log \sigma \left( \beta \log \frac{\pi_\theta(y_w \mid x)}{\pi_{\text{ref}}(y_w \mid x)} - \beta \log \frac{\pi_\theta(y_l \mid x)}{\pi_{\text{ref}}(y_l \mid x)} \right) \right].\] <p>Thus, instead of first learning a reward and then finding the optimizing policy, one directly finds the optimal policy such that its reward as obtained from (\ref{eq:reward-as-function-of-policy}) corresponds to collected human preferences (i.e., a reward that optimizes (\ref{eq:reward-loss-binary})). Note that while the induced reward function itself is intractable, the differences of rewards remain tractable and can be computed using the learned policy. This should be sufficient for practical purposes, where rewards are mostly used to rank completions and, e.g., perform rejection sampling.</p> <p>The paper includes some more details and a discussion of the interpretation of the DPO update, and a detailed comparison to standard RLHF, but the essence of the method is captured by the above derivation. DPO can be easily extended to the case of more completions per input.</p> <h2 id="dpo-in-the-wild---experiments-llms-and-software">DPO in the Wild - Experiments, LLMs and Software</h2> <p>The original experiments in the paper were conducted on small-scale models and datasets, and as such were not very convincing. We partially include them here for completeness:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/2024/assets/img/2024-05-07-rlhf-without-rl/original-evaluation.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/2024/assets/img/2024-05-07-rlhf-without-rl/original-evaluation.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/2024/assets/img/2024-05-07-rlhf-without-rl/original-evaluation.svg-1400.webp"/> <img src="/2024/assets/img/2024-05-07-rlhf-without-rl/original-evaluation.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Original evaluation<d-cite key="rafailov2023direct"/> of DPO on small-scale models and datasets. Left: TL;DR summarization win rates vs. human-written summaries, using GPT-4 as evaluator. DPO exceeds PPO’s best-case performance on summarization, while being more robust to changes in the sampling temperature. Right: The frontier of expected reward vs KL to the reference policy. DPO provides the highest expected reward for all KL values, demonstrating the quality of the optimization. </div> <p>Fortunately, DPO’s simplicity has made it attractive to many researchers and engineers. By now, only a few months after the publication of the paper, it is already included in <a href="https://huggingface.co/docs/trl/dpo_trainer">trl</a> as well as the ray-based library <a href="https://github.com/OpenLLMAI/OpenRLHF">OpenRLHF</a> (which is notably not using rllib, but that’s a story for another day). Moreover, several large models have been trained with DPO, including <a href="https://huggingface.co/HuggingFaceH4/zephyr-7b-alpha">Zephyr 7B</a> and the 70B parameters <a href="https://github.com/allenai/open-instruct">TÜLU 2</a>. Here is what the authors of the latter had to say about DPO<d-cite key="ivison2023camels"></d-cite>:</p> <blockquote> DPO training significantly improves AlpacaEval and MT-Bench performance. At all sizes, DPO training provides significant improvements in AlpacaEval, with our largest DPO-trained model significantly outperforming GPT-3.5-turbo-0314 (89.4 vs. 95.1) and is competitive with GPT-4 ... We also observe that DPO training provides a large boost in MT-Bench performance for the 13B and 70B size models, with TÜLU 2+DPO 70B being the best-performing open model compared to all other models on the MT-Bench leaderboard. </blockquote> <blockquote> DPO training is stable at large scales. We find that DPO training scales without issues with 70Bsize models, with DPO training still providing large benefits for open-ended generation (AlpacaEval) even at the 70B size. This suggests DPO is a promising path for training large models on human feedback without the engineering complexity required by PPO. To our knowledge, TÜLU 2+DPO 70B is the largest publicly-released DPO-trained model. </blockquote> <blockquote> DPO does not dramatically harm most other metrics. We find that DPO training does not significantly change performance in most other metrics we measure, such as factual reasoning (MMLU) or reasoning (BBH, GSM8k), with the exception of multilinguality (which we discuss below). This suggests that DPO training does not significantly change model capabilities. DPO training significantly drops multilingual capabilities. We find that DPO training significantly drops performance in TydiQA, which tests the multilingual capabilities of our model. However, we note that both our supervised finetuning and DPO data mixes do not explicitly contain multilingual data, and are majority English-language. As such, DPO training is likely to make multilingual outputs further out-of-distribution, and mixing in multilingual data at instruction tuning and DPO training stages may significantly improve these results. </blockquote> <blockquote> DPO training increases model verbosity. As seen in Table 4, TÜLU 2+DPO models generally output answers of longer length than those trained without DPO. This is in line with prior work showing a bias toward verbosity from RLHF training. However, we note that our DPO-trained models appear dramatically less verbose than other openweight models, which future work will investigate. </blockquote> <h2 id="closing-remarks">Closing Remarks</h2> <p>One may find it surprising that supervised learning is able to replace RL on a formal level. For RLHF, <em>new</em> data is sampled from the language model, and for DPO this is not the case.</p> <p>However, after paying closer attention to the information flow of RLHF as described above, it may not be too surprising after all. The sampled data is not really new - it is created using the very same model that one is trying to optimize. The rewards for these samples are also not new, they are obtained by fitting a reward function to the preferences, and no new human preferences are retrieved during optimization. So from the information-flow perspective, supervised learning and RL are indeed equivalent in this particular case. Maybe Francois Chollet was not too extreme for suggesting to <em>get rid of deep RL altogether</em> in his tweet (note that it predates DPO. Personally, I don’t believe in a complete futility of deep RL, but for RLHF he was on point):</p> <div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">The answer to &quot;when should I use deep RL&quot; is that you shouldn&#39;t -- you should reframe your problem as a supervised learning problem, which is the only thing that curve-fitting can handle. In all likelihood this applies to RLHF for LLMs.</p>&mdash; François Chollet (@fchollet) <a href="https://twitter.com/fchollet/status/1630241783111364608?ref_src=twsrc%5Etfw">February 27, 2023</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <p>.</p> <p>Another surprising aspect of DPO is the question: <em>Why has nobody done this before?</em> Hopefully after reading this blog post, you will agree that the derivation of DPO is not particularly complicated, so why did it take almost 4 years after the introduction of RLHF? Especially considering how tricky RLHF can be to implement. I don’t have an answer, though my intuition is that sometimes as a community we put too much effort into following a working solution, instead of taking a step back and searching for a simpler path. We might have witnessed a large scale instance of the <a href="https://en.wikipedia.org/wiki/Region-beta_paradox">Region-beta paradox</a>.</p> <p>As a final note on community dynamics: supervised and self-supervised learning are now making more headlines compared to reinforcement learning, and DPO might have the effect of slowing down the complicated (but, as I believe, necessary) marriage of RL and LLMs. I do think that planning and search should play some part of LLM training in the future, although only for settings in which there is an actual environment from which new information can be extracted (like tool-use or robotics). For now, however, taking the RL out of RLHF seems like a good step forward. If DPO can be made beneficial for most LLM trainings, I believe that one can firmly answer the opening question of this blog as:</p> <p><em>Is RLHF really (online) RL? No, it is not.</em></p>]]></content><author><name>Michael Panchenko</name></author><summary type="html"><![CDATA[We discuss the RL part of RLHF and its recent displacement by direct preference optimization (DPO). With DPO, a language model can be aligned with human preferences without sampling from an LM, thereby significantly simplifying the training process. By now, DPO has been implemented in many projects and seems to be here to stay.]]></summary></entry></feed>